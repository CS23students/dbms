5. Develop a gui based supermarket stock maintenance

âœ… Required Libraries
pip install tk sqlite3


ðŸ›’ Code: Simple Stock Management GUI
import sqlite3
import tkinter as tk
from tkinter import messagebox

# Connect to SQLite database
conn = sqlite3.connect('supermarket.db')
cursor = conn.cursor()

# Create stock table if not exists
cursor.execute('''
    CREATE TABLE IF NOT EXISTS stock (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        quantity INTEGER NOT NULL,
        price REAL NOT NULL
    )
''')
conn.commit()

# GUI Application
app = tk.Tk()
app.title("Supermarket Stock Maintenance")
app.geometry("400x400")

# Labels and Entries
tk.Label(app, text="Product Name").pack()
entry_name = tk.Entry(app)
entry_name.pack()

tk.Label(app, text="Quantity").pack()
entry_qty = tk.Entry(app)
entry_qty.pack()

tk.Label(app, text="Price").pack()
entry_price = tk.Entry(app)
entry_price.pack()

# Functions
def add_product():
    name = entry_name.get()
    qty = entry_qty.get()
    price = entry_price.get()

    if name and qty and price:
        try:
            cursor.execute("INSERT INTO stock (name, quantity, price) VALUES (?, ?, ?)",
                           (name, int(qty), float(price)))
            conn.commit()
            messagebox.showinfo("Success", "Product added!")
            entry_name.delete(0, tk.END)
            entry_qty.delete(0, tk.END)
            entry_price.delete(0, tk.END)
        except Exception as e:
            messagebox.showerror("Error", str(e))
    else:
        messagebox.showwarning("Input error", "Fill all fields")

def view_stock():
    stock_window = tk.Toplevel(app)
    stock_window.title("Current Stock")
    rows = cursor.execute("SELECT * FROM stock").fetchall()

    text = tk.Text(stock_window, width=50, height=15)
    text.pack()
    text.insert(tk.END, "ID\tName\tQty\tPrice\n")
    text.insert(tk.END, "-"*40 + "\n")
    for row in rows:
        text.insert(tk.END, f"{row[0]}\t{row[1]}\t{row[2]}\t{row[3]}\n")

def delete_product():
    pid = entry_name.get()
    if pid:
        cursor.execute("DELETE FROM stock WHERE name = ?", (pid,))
        conn.commit()
        messagebox.showinfo("Deleted", "Product deleted if existed.")
        entry_name.delete(0, tk.END)
    else:
        messagebox.showwarning("Input error", "Enter product name to delete.")

# Buttons
tk.Button(app, text="Add Product", command=add_product).pack(pady=5)
tk.Button(app, text="View Stock", command=view_stock).pack(pady=5)
tk.Button(app, text="Delete Product", command=delete_product).pack(pady=5)

app.mainloop()
